{"version":3,"sources":["assets/images/macho-zun.svg","components/pages/Index.js","App.js","serviceWorker.js","index.js","assets/images/logo.png","assets/images/macho-micronn.svg"],"names":["module","exports","Wrapper","styled","div","Container","FadeIn","keyframes","Top","Fluffy","LogoImg","img","FixedContainer","KekezunDive","MicronnDive","GuruGuru","MachoZunImg","FixedLeft","FixedCenter","MachoMicronnImg","FixedRight","src","LogoPng","MachoZunSvg","MachoMicronnSvg","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,uC,i8FCM3C,IAAMC,EAAUC,IAAOC,IAAV,KAIPC,EAAYF,IAAOC,IAAV,KAKTE,EAASC,YAAH,KAUNC,EAAML,IAAOC,IAAV,IAKWE,GAMdG,EAASF,YAAH,KAUNG,EAAUP,IAAOQ,IAAV,IAKOF,GAOdG,EAAiBT,IAAOC,IAAV,KAYdS,EAAcN,YAAH,KASXO,EAAcP,YAAH,KASXQ,EAAWR,YAAH,KAURS,EAAcb,IAAOQ,IAAV,IAGGI,GAOdE,EAAYd,IAAOC,IAAV,IAGKS,GAOdK,EAAcf,IAAOC,IAAV,KAIXe,EAAkBhB,IAAOQ,IAAV,IAGDI,GAOdK,EAAajB,IAAOC,IAAV,IAGIU,GAOL,aACb,OACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,CAASW,IAAKC,QAGlB,kBAACV,EAAD,KACE,kBAACK,EAAD,KACE,kBAACD,EAAD,CAAaK,IAAKE,OAEpB,kBAACL,EAAD,MACA,kBAACE,EAAD,KACE,kBAACD,EAAD,CAAiBE,IAAKG,UCjJjBC,MARf,WACE,OACE,6BACE,kBAACC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B9C,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.dd8f0ec6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/macho-zun.7d58d13b.svg\";","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport LogoPng from \"../../assets/images/logo.png\";\nimport MachoMicronnSvg from \"../../assets/images/macho-micronn.svg\";\nimport MachoZunSvg from \"../../assets/images/macho-zun.svg\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst FadeIn = keyframes`\nfrom {\n  opacity: 0;\n};\n\nto {\n  opacity: 1;\n};\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: center;\n  opacity: 0;\n  margin-top: 0%;\n  animation-name: ${FadeIn};\n  animation-fill-mode: forwards;\n  animation-duration: 0.8s;\n  animation-delay: 3s;\n`;\n\nconst Fluffy = keyframes`\nfrom {\n\n};\n\nto {\ntransform: translateY(4rem);\n};\n`;\n\nconst LogoImg = styled.img`\n  height: 100%;\n  width: 100%;\n  max-height: 32rem;\n  max-width: 32rem;\n  animation-name: ${Fluffy};\n  animation-duration: 0.8s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n  animation-timing-function: ease-in;\n`;\n\nconst FixedContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  pointer-events: none;\n`;\n\nconst KekezunDive = keyframes`\nfrom {\n};\n\nto {\n  transform: translate(0, 0);\n};\n`;\n\nconst MicronnDive = keyframes`\nfrom {\n};\n\nto {\n  transform: translate(0, 0);\n};\n`;\n\nconst GuruGuru = keyframes`\nfrom {\n  transform: rotate(0deg);\n};\n\nto {\n  transform: rotate(360deg);\n};\n`;\n\nconst MachoZunImg = styled.img`\n  height: 100%;\n  width: 100%;\n  animation-name: ${GuruGuru};\n  animation-duration: 0.1s;\n  animation-iteration-count: 8;\n  animation-delay: 1s;\n  animation-timing-function: linear;\n`;\n\nconst FixedLeft = styled.div`\n  flex: 1;\n  transform: translate(400%, -400%);\n  animation-name: ${KekezunDive};\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  animation-delay: 1s;\n`;\n\nconst FixedCenter = styled.div`\n  flex: 2 1 auto;\n`;\n\nconst MachoMicronnImg = styled.img`\n  height: 100%;\n  width: 100%;\n  animation-name: ${GuruGuru};\n  animation-duration: 0.1s;\n  animation-iteration-count: 8;\n  animation-delay: 1s;\n  animation-timing-function: linear;\n`;\n\nconst FixedRight = styled.div`\n  flex: 1;\n  transform: translate(-400%, -400%);\n  animation-name: ${MicronnDive};\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  animation-delay: 1s;\n`;\n\nexport default () => {\n  return (\n    <Wrapper>\n      <Container>\n        <Top>\n          <LogoImg src={LogoPng}></LogoImg>\n        </Top>\n      </Container>\n      <FixedContainer>\n        <FixedLeft>\n          <MachoZunImg src={MachoZunSvg}></MachoZunImg>\n        </FixedLeft>\n        <FixedCenter></FixedCenter>\n        <FixedRight>\n          <MachoMicronnImg src={MachoMicronnSvg}></MachoMicronnImg>\n        </FixedRight>\n      </FixedContainer>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport Index from \"./components/pages/Index\";\n\nfunction App() {\n  return (\n    <div>\n      <Index></Index>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8f381000.png\";","module.exports = __webpack_public_path__ + \"static/media/macho-micronn.d5006bfb.svg\";"],"sourceRoot":""}